argv = ['/usr/local/Cellar/node/0.8.18/bin/node-waf', 'configure']
blddir = '/Users/jamesjwood/git/utils/node_modules/jscoverage/build'
commands = {'dist': 0, 'configure': True, 'distcheck': 0, 'install': 0, 'build': 0, 'clean': 0, 'distclean': 0, 'check': 0, 'uninstall': 0}
cwd = '/Users/jamesjwood/git/utils/node_modules/jscoverage'
environ = {'npm_config_git': 'git', 'npm_config_color': 'true', 'npm_config_engine_strict': '', 'npm_config_viewer': 'man', 'npm_config_searchopts': '', 'npm_config_fetch_retry_factor': '10', 'TERM_PROGRAM_VERSION': '309', 'npm_config_group': '20', 'npm_package_homepage': 'https://github.com/sunfang1cn/node-jscoverage', 'npm_config_browser': '', 'npm_package_repository_url': 'git://github.com/sunfang1cn/node-jscoverage.git', 'npm_config_global': '', 'HOME': '/Users/jamesjwood', 'TERM_PROGRAM': 'Apple_Terminal', 'LANG': 'en_GB.UTF-8', 'SHELL': '/bin/bash', 'npm_config_save': '', 'npm_config_registry': 'https://registry.npmjs.org/', 'npm_config_unicode': 'true', 'npm_config_production': '', 'npm_config_pre': '', 'npm_config_message': '%s', 'npm_config_always_auth': '', '_': '/usr/local/Cellar/node/0.8.18/bin/node-waf', 'npm_config_searchexclude': '', 'npm_config_loglevel': 'http', 'npm_config_tmp': '/var/folders/xy/ybjpfc092x115y1pn1b_mp9m0000gn/T/', 'npm_package_engines_node': '>= 0.6.0', 'npm_config_argv': '{"remain":[],"cooked":["install"],"original":["install"]}', 'npm_config_cache_lock_wait': '10000', 'npm_config_cache_lock_retries': '10', 'npm_package_scripts_preinstall': 'node-waf configure', 'npm_config_strict_ssl': 'true', 'npm_config_save_bundle': '', 'npm_config_save_dev': '', 'npm_config_optional': 'true', 'npm_execpath': '/usr/local/Cellar/node/0.8.18/lib/node_modules/npm/bin/npm-cli.js', 'npm_package_main': 'index.js', 'npm_config_init_version': '0.0.0', 'npm_config_user_agent': 'node/v0.8.18', 'npm_lifecycle_event': 'preinstall', 'npm_config_rollback': 'true', 'npm_config_init_author_name': '', 'npm_config_globalignorefile': '/usr/local/share/npm/etc/npmignore', '__CF_USER_TEXT_ENCODING': '0x1F5:0:0', 'npm_config_yes': '', 'npm_config_npaturl': 'http://npat.npmjs.org/', 'npm_config_usage': '', 'npm_package_description': 'jscoverage module for node.js', 'npm_config_shell': '/bin/bash', 'npm_config_force': '', 'LOGNAME': 'jamesjwood', 'npm_config_ignore': '', 'npm_config_user': '501', 'npm_node_execpath': '/usr/local/Cellar/node/0.8.18/bin/node', 'npm_config_link': '', 'npm_config_globalconfig': '/usr/local/share/npm/etc/npmrc', 'npm_package_name': 'jscoverage', 'npm_config_userconfig': '/Users/jamesjwood/.npmrc', 'npm_package_scripts_install': 'node-waf', 'VERSIONER_PYTHON_PREFER_32_BIT': 'no', 'npm_config_parseable': '', 'npm_config_dev': '', 'npm_config_rebuild_bundle': 'true', 'npm_config_userignorefile': '/Users/jamesjwood/.npmignore', 'npm_config_username': 'jamesjwood', 'USER': 'jamesjwood', 'PATH': '/usr/local/Cellar/node/0.8.18/lib/node_modules/npm/bin/node-gyp-bin:/Users/jamesjwood/git/utils/node_modules/jscoverage/node_modules/.bin:/Users/jamesjwood/git/utils/node_modules/.bin:/usr/local/Cellar/node/0.8.18/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/git/bin', 'npm_package_author_name': 'Based on jscoverage@siliconforks.com; Modified by kate.sf', 'npm_config_coverage': '', 'TERM': 'xterm-256color', 'npm_config_versions': '', 'npm_config_node_version': 'v0.8.18', 'npm_config_onload_script': '', 'VERSIONER_PYTHON_VERSION': '2.7', 'SHLVL': '2', 'npm_config_description': 'true', 'npm_config_cache_lock_stale': '60000', 'npm_config_sign_git_tag': '', 'npm_config_init_author_url': '', 'npm_config_fetch_retry_maxtimeout': '60000', 'npm_config_prefix': '/usr/local/share/npm', 'npm_config_unsafe_perm': 'true', 'npm_config_cache': '/Users/jamesjwood/.npm', 'npm_config_testhoodie_admin_pass': 'sidj1842@', 'npm_config_email': 'jamesjwood@msn.com', 'npm_config_save_optional': '', 'npm_config_fetch_retry_mintimeout': '10000', 'NODE': '/usr/local/Cellar/node/0.8.18/bin/node', 'TERM_SESSION_ID': '3C185FDC-9364-4E73-9B25-A042C0808CF0', 'npm_config_proxy': '', 'npm_config_fetch_retries': '2', 'npm_config_cache_max': 'null', 'npm_config_depth': 'null', 'SSH_AUTH_SOCK': '/tmp/launch-h1ws3e/Listeners', 'npm_config_umask': '18', 'npm_config_proprietary_attribs': 'true', 'COM_GOOGLE_CHROME_FRAMEWORK_SERVICE_PROCESS/USERS/JAMESJWOOD/LIBRARY/APPLICATION_SUPPORT/GOOGLE/CHROME_SOCKET': '/tmp/launch-oisoj7/ServiceProcessSocket', 'npm_config_long': '', 'Apple_PubSub_Socket_Render': '/tmp/launch-PFj9iJ/Render', 'npm_config_editor': 'vi', 'npm_package_version': '0.2.5', 'npm_config_https_proxy': '', 'npm_package_readmeFilename': 'Readme.md', 'TMPDIR': '/var/folders/xy/ybjpfc092x115y1pn1b_mp9m0000gn/T/', 'npm_package_repository_type': 'git', 'npm_config_init_author_email': '', 'npm_config_npat': '', 'npm_package_readme': '"# node-jscoverage\\n\\n   [JScoverage](http://siliconforks.com/jscoverage/) for node. Have been Modified to works both for binary executables and node.js modules.\\n\\n## Installation\\n   for use in node.js modules:\\n      \\n      $ npm  install jscoverage\\n  \\n   for use by binary executables just like the source version, just pull it to local and:\\n      \\n      $ ./configure && make && make install\\n\\n## How to Use\\n      /** for nodejs **/\\n      var jsc = require(\'jscoverage\');\\n      require = jsc.require(module); // rewrite require function\\n      // pay attention to the second param, means do jscoverage process for this module\\n      var test_module = require(\'module for test\',true); \\n      \\n      describe(\'module\',function(){\\n         describe(\'#func\',function(){\\n            it(\'some test\',function(){\\n               //TODO test code here\\n            });\\n         });\\n      });\\n      // output the coverage when test process exit, you can custom your own coverage report \\n      // because the jscoverage report is really easy to DIY\\n      process.on(\'exit\',function(){\\n         jsc.coverage();\\n      });\\n      \\n      /** \\n         for javascript in browser,you need a node server to hold your js code,\\n         when browser request the js file, using jscoverage to process the file content,\\n         then output the jscoverage injected code .\\n      **/\\n      http.create(function(req,res){\\n         var path = wwwroot + req.url;\\n         // process single file\\n         var content = jsc.processFile(path,encode);\\n         res.end(content);\\n      }\\n      \\n   \\n## API\\n\\n      jscoverage.processFile(path, encode): process single file, will return the process results\\n         path: the file to process\\n         encode: the charset of the file or content , encode: utf-8,gbk\\n\\n      jscoverage.process(filename, content, encode): process content input, will return the results\\n         filename: this param is needed for _$jscoverage[filename], it is used as a key name.\\n         content: script content,string type\\n         encode: input content encode\\n\\n      jscoverage.processDir(source_path, dest_path, exclude, exclude_file, options): process every js file in a dir\\n         source_path: the dir to process, support relative path\\n         dest_path: the output dir to put result files\\n         exclude: the dir to exclude, like \'.svn|.git\'\\n         exclude_file: the file to exclude \'.npmignore|.vimrc\'\\n         options: {}\\n\\n      jscoverage.require(module): automatic process when flag is true, will mock the node.js`s require\\n         return the mocked require function ,which call as : \\n            var mod = require(path,isInstrument);\\n      jscoverage.coverage(): show coverage rate on console\\n         you can custom this function to make your own coverage report!\\n   \\n      \\n## test private functions in a module\\n\\n      ======== mo.js ========\\n      function inner(a,b){\\n         return a+b;\\n      }\\n      exports.mo = function(){}\\n      \\n      ======= test.js =======\\n      var test_mo = require(\'./mo.js\', true);\\n      test_mo._test(\'inner\',[1,2]); // test private function inner\\n      var inner = test_mo._get(\'inner\');\\n      inner(1,2); // call the private inner function of the mo module \\n\\n## extend API \\n   \\n      InstrumentedMod._test(funcName,args);\\n         test inner functions\\n      InstrumentedMod._call(funcName,args);\\n         same as _test\\n      InstrumentedMod._replace(objName,value);\\n         replace the inner object\\n      InstrumentedMod._get(objName);\\n         get the inner object;\\n      InstrumentedMod._reset(objName);\\n         rollback the object replace by InstrumentedMod._replace();\\n      \\n      jsc.config(opt);\\n         you can re-defined the above extend api by call this config function\\n         opt has properties:\\n            call:\\n            test:\\n            get:\\n            replace:\\n            reset:\\n            \\n      jsc will test if your module is conflict with this inject functions , it is save!\\n\\n"', 'npm_config_init_module': '/Users/jamesjwood/.npm-init.js', 'npm_config_version': '', 'npm_config_json': '', 'npm_config_searchsort': 'name', 'npm_package_author_email': 'kate.sf@taobao.com', 'npm_lifecycle_script': 'node-waf configure', 'Apple_Ubiquity_Message': '/tmp/launch-od7QZX/Apple_Ubiquity_Message', 'PWD': '/Users/jamesjwood/git/utils/node_modules/jscoverage', 'npm_config_cache_min': '', 'npm_config_tag': 'latest', 'COMMAND_MODE': 'unix2003'}
files = []
hash = 0
options = {'compile_targets': None, 'force': False, 'verbose': 0, 'nocache': False, 'progress_bar': 0, 'destdir': '', 'keep': False, 'zones': '', 'blddir': '', 'prefix': '/usr/local/', 'jobs': 8, 'srcdir': ''}
srcdir = '/Users/jamesjwood/git/utils/node_modules/jscoverage'
